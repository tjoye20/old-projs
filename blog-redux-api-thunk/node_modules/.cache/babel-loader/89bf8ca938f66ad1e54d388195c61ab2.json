{"ast":null,"code":"var _jsxFileName = \"/Users/toluoyeniyi/Desktop/react-js/blog-redux-api-thunk/src/components/UserHeader.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUser } from '../actions'; //we import this, to pass it to Redux and assign it to a \n//prop that we can use.\n\nclass UserHeader extends React.Component {\n  componentDidMount() {\n    this.props.fetchUser(this.props.userId);\n  }\n\n  renderUser() {\n    const user = this.props.user; //alternative: const { user } = this.props\n\n    if (!user) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, user.name);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui relaxed divided list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 12\n      }\n    }, this.renderUser());\n  }\n\n}\n\n; //mapStateToProps gets called with #ownProps, the props that are\n//being passed to this component, so we can use it to do\n//precalculations\n\nconst mapStateToProps = (state, ownProps) => {\n  const user = state.users.find(user => user.id === ownProps.userId);\n  return {\n    user: user //value stored in our reducer\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  //we save that api call into a prop so we \n  //can call it in our componentDidMount\n  fetchUser: fetchUser\n})(UserHeader);","map":{"version":3,"sources":["/Users/toluoyeniyi/Desktop/react-js/blog-redux-api-thunk/src/components/UserHeader.js"],"names":["React","connect","fetchUser","UserHeader","Component","componentDidMount","props","userId","renderUser","user","name","render","mapStateToProps","state","ownProps","users","find","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B,C,CACA;AACA;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACvCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWJ,SAAX,CAAqB,KAAKI,KAAL,CAAWC,MAAhC;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,UAAMC,IAAI,GAAG,KAAKH,KAAL,CAAWG,IAAxB,CADW,CAEX;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AAED,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACC,IADR,CADF;AAKD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,KAAKH,UAAL,EAA1C,CAAP;AACD;;AAtBsC;;AAuBxC,C,CAED;AACA;AACA;;AACA,MAAMI,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAML,IAAI,GAAGI,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAkBP,IAAD,IAAUA,IAAI,CAACQ,EAAL,KAAYH,QAAQ,CAACP,MAAhD,CAAb;AAEA,SAAO;AACLE,IAAAA,IAAI,EAAEA,IADD,CAEL;;AAFK,GAAP;AAID,CAPD;;AASA,eAAeR,OAAO,CAACW,eAAD,EAAkB;AACtC;AACA;AACAV,EAAAA,SAAS,EAAEA;AAH2B,CAAlB,CAAP,CAIXC,UAJW,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUser } from '../actions'\n//we import this, to pass it to Redux and assign it to a \n//prop that we can use.\n\nclass UserHeader extends React.Component {\n  componentDidMount() {\n    this.props.fetchUser(this.props.userId);\n  }\n\n  renderUser() {\n    const user = this.props.user;\n    //alternative: const { user } = this.props\n\n    if (!user) {\n      return null;\n    }\n    \n    return(\n      <div className='header'>\n        {user.name}\n      </div>\n    )\n  };\n\n  render() {\n    return <div className='ui relaxed divided list'>{this.renderUser()}</div>;\n  }\n};\n\n//mapStateToProps gets called with #ownProps, the props that are\n//being passed to this component, so we can use it to do\n//precalculations\nconst mapStateToProps = (state, ownProps) => {\n  const user = state.users.find((user) => user.id === ownProps.userId);\n  \n  return {\n    user: user\n    //value stored in our reducer\n  };\n}\n\nexport default connect(mapStateToProps, { \n  //we save that api call into a prop so we \n  //can call it in our componentDidMount\n  fetchUser: fetchUser \n} )(UserHeader);"]},"metadata":{},"sourceType":"module"}